plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jacoco"
    id "maven-publish"
    id "signing"
    id 'com.github.spotbugs' version '2.0.1'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
id 'org.jetbrains.kotlin.plugin.spring' version '1.3.50'
    id 'com.github.johnrengelman.shadow' version '2.0.0'

}

description = "RPC Library"
group = "com.openlattice"
ext.projectName = "scrunchie"
ext.scmUrl = 'scm:git:https://github.com/openlattice/scrunchie.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/scrunchie.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/scrunchie.git'

apply plugin: 'kotlin'
apply from: 'https://raw.githubusercontent.com/openlattice/gradles/master/openlattice.gradle'


ext.sourceCompatibility = JavaVersion.VERSION_11
ext.targetCompatibility = JavaVersion.VERSION_11

spotbugs {
    toolVersion = '3.1.12'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jacoco {
    toolVersion = "0.8.2"
}

configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"
    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    if (project.hasProperty("developmentMode") && project.developmentMode) {
        logger.quiet(project.name + " using project dependencies.")

        compile(project(":api"))

        compile(project(":conductor-client"))

        testCompile(project(path: ":rhizome", configuration: "tests"))
        testCompile(project(":datastore"))
        testCompile(project(path: ":rhizome-client", configuration: "tests"))

    } else {
        logger.quiet(project.name + " using jar dependencies.")

        compile("com.openlattice:api:${api_version}")

        compile("com.openlattice:conductor-client:${conductor_client_version}")

        testCompile("com.openlattice:rhizome:${rhizome_version}:tests")
        testCompile "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }
    
    /*
     * ELASTICSEARCH
     */
    compile("org.elasticsearch:elasticsearch:${elastic_version}") {
        exclude module: 'slf4j-log4j12'
    }

    compile("org.elasticsearch.client:transport:${elastic_version}") {
        exclude module: 'slf4j-log4j12'
    }

    /*
     * DEEPLEARNING4J
     */
    compile("org.deeplearning4j:deeplearning4j-core:${deeplearning4j}") {
        exclude module: 'guava'
    }

    compile("org.nd4j:nd4j-native-platform:${deeplearning4j}") {
        exclude module: 'guava'
    }

    /*
     * TESTING
     */
    testCompile "junit:junit:${junit_version}"
    testCompile "org.mockito:mockito-core:$mockito_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version";
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility = JavaVersion.VERSION_11
    ext.targetCompatibility = JavaVersion.VERSION_11
}

idea {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility = JavaVersion.VERSION_11
    ext.targetCompatibility = JavaVersion.VERSION_11
}

shadowJar {
    zip64 true
}
eclipse.classpath.plusConfigurations += [configurations.provided]

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
