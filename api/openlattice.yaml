openapi: "3.0.0"
info:
  description: "OpenLattice API"
  version: "0.0.1"
  title: "OpenLattice API"
  termsOfService: "http://api.openlattice.com/terms/"
  contact:
    email: "support@openlattice.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: "https://api.openlattice.com"
    description: "Production OpenLattice API"
  - url: "https://api.staging.openlattice.com"
    description: "Staging OpenLattice API"
  - url: "http://localhost:8080"
    description: "Local OpenLattice API"

paths:
  ##############
  ## EDM APIs ##
  ##############

  /datastore/edm/:
    get:
      summary: Gets the entity data model, including namespaces, schemas, entity types, association types, and property types.
      operationId: getEntityDataModel
      responses:
        "200":
          description: "An Entity Data Model"
          content:
            application/json:
              schema:
                $ref: "#/components/EDM"
      tags:
        - edm
    patch:
      summary: Updates the entity data model, including schemas, entity types, association types, and property types.
      operationId: updateEntityDataModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/EDM"
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
  /datastore/edm/diff/:
    post:
      summary: Gets the changes between the existing entity data model and the entity data model passed in, including schemas, association types, entity types, and property types.
      operationId: getEntityDataModelDiff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/EDMdiff"
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/EDMdiff"

  #entity types

  /datastore/edm/entity/type/{entityTypeId}:
    get:
      summary: Gets the EntityType definition for the given EntityType UUID.
      operationId: getEntityType
      tags:
        - edm
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/entityType"
    delete:
      summary: Deletes the EntityType definition for the given EntityType UUID.
      operationId: deleteEntityType
      tags:
        - edm
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
    patch:
      summary: Updates the EntityType definition for the given EntityType UUID with the given metadata.
      operationId: updateEntityTypeMetaData
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/metadataUpdate"
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
  /datastore/edm/ids/entity/type/{namespace}/{name}:
    get:
      summary: Gets the EntityType UUID for the given EntityType FQN.
      operationId: getEntityTypeId
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            example: openlattice
        - name: name
          in: path
          required: true
          schema:
            type: string
            example: myentitytype
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
                format: uuid
  /datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}:
    put:
      summary: Updates the EntityType definition for the given EntityType UUID by adding the given PropertyType UUID.
      operationId: addPropertyTypeToEntityType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: propertyTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
    delete:
      summary: Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID.
      operationId: removePropertyTypeFromEntityType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: propertyTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
  /datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}/force:
    delete:
      summary: Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID, regardless of whether or not there is data associated with the entity type.
      operationId: forceRemovePropertyTypeFromEntityType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: propertyTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
  /datastore/edm/entity/type/:
    get:
      summary: Gets all EntityType definitions.
      operationId: getAllEntityTypes
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/entityType"
    post:
      summary: Creates a new EntityType definition, if it doesn't exist.
      operationId: createEntityType
      tags:
        - edm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/entityType"
      responses:
        "200":
          description: Success
  /datastore/edm/association/type/:
    get:
      summary: Gets all association EntityType definitions.
      operationId: getAllAssociationEntityTypes
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/associationType"
    post:
      summary: Creates a new AssociationType definition, if it doesn"t exist.
      operationId: createAssociationType
      tags:
        - edm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/associationType"
      responses:
        "200":
          description: Success
  /datastore/edm/entity/type/{entityTypeId}/property/type:
    patch:
      summary: Updates the EntityType definition for the given EntityType UUID by reordering its properties as specified by the provided list.
      operationId: reorderPropertyTypesInEntityType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: propertyTypeIds
          in: path
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        "200":
          description: Success
  /datastore/edm/entity/type/{entityTypeId}/hierarchy:
    patch:
      summary: Get the EntityType hierarchy for the given EntityType UUID.
      operationId: getEntityTypeHierarchy
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success

  # property Types

  /datastore/edm/property/type/{propertyTypeId}:
    get:
      summary: Gets the PropertyType definition for the given PropertyType UUID.
      operationId: getPropertyType
      tags:
        - edm
      parameters:
        - name: propertyTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/propertyType"
    delete:
      summary: Deletes the PropertyType definition for the given PropertyType UUID.
      operationId: deletePropertyType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: propertyTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
    patch:
      summary: Updates the PropertyType definition for the given PropertyType UUID with the given metadata.
      operationId: updatePropertyTypeMetaData
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: propertyTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/metadataUpdate"
      responses:
        "200":
          description: Success
  /datastore/edm/property/type/{propertyTypeId}/force:
    delete:
      summary: Deletes the PropertyType definition for the given PropertyType UUID regardless of whether or not there is data associated with it.
      operationId: forceDeletePropertyType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: propertyTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
  /datastore/edm/ids/property/type/{namespace}/{name}:
    get:
      summary: Gets the PropertyType UUID for the given PropertyType FQN.
      operationId: getPropertyTypeId
      tags:
        - edm
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
                format: uuid
  /datastore/edm/property/type/:
    get:
      summary: Gets all PropertyType definitions.
      operationId: getAllPropertyTypes
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/propertyType"
    post:
      summary: Creates a new PropertyType definition, if it doesn"t exist.
      operationId: createPropertyType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/propertyType"
      responses:
        "200":
          description: Success
  /datastore/edm/property/type/namespace/{namespace}:
    get:
      summary: Gets all PropertyType definitions under the given namespace.
      operationId: getAllPropertyTypesInNamespace
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/propertyType"

  # association types

  /datastore/edm/association/type/{associationTypeId}:
    get:
      summary: Get the AssociationType definition for the given AssociationType UUID.
      operationId: getAssociationType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/associationType"
    delete:
      summary: Delete the AssociationType definition for the given AssociationType UUID.
      operationId: deleteAssociationType
      tags:
        - edm
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
  /datastore/edm/association/type/{associationTypeId}/detailed:
    get:
      summary: Get details about the AssociationType for the given AssociationType UUID.
      operationId: getAssociationTypeDetails
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/associationType"
  /datastore/edm/association/type/{associationTypeId}/available:
    get:
      summary: Get all available associations for the given AssociationType UUID.
      operationId: getAllAvailableAssociationTypes
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/associationType"
  /datastore/edm/association/type/{associationTypeId}/dst/{entityTypeId}:
    put:
      summary: Update the AssociationType dst entity types for the given AssociationType UUID by adding the given EntityType UUID.
      operationId: addDstEntityTypeToAssociationType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
    delete:
      summary: Updates the AssociationType dst entity types for the given AssociationType UUID by removing the given EntityType UUID.
      operationId: removeDstEntityTypeFromAssociationType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
  /datastore/edm/association/type/{associationTypeId}/src/{entityTypeId}:
    put:
      summary: Update the AssociationType src entity types for the given AssociationType UUID by adding the given EntityType UUID.
      operationId: addSrcEntityTypeToAssociationType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
    delete:
      summary: Updates the AssociationType src entity types for the given AssociationType UUID by removing the given EntityType UUID.
      operationId: removeSrcEntityTypeFromAssociationType
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: entityTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success

  # summary

  /datastore/edm/summary:
    get:
      summary: Get Property Usage Summary for all properties.
      operationId: getAllPropertyUsageSummaries
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/propertyUsageSummary"
  /datastore/edm/summary/{propertyTypeId}:
    get:
      summary: Get Property Usage Summary for property with given ID.
      operationId: getPropertyUsageSummary
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: propertyTypeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/propertyUsageSummary"

  # schema

  /datastore/edm/schema/{namespace}/{name}:
    get:
      summary: Gets the schema contents for a corresponding namespace and name.
      operationId: getSchemaContents
      tags:
        - edm
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: fileType
          in: query
          schema:
            type: string
            enum: [csv, json, yaml]
            default: yaml
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schema"
    put:
      summary: Creates an empty schema, if it doesn't exist. If schema exists then no action is taken.
      operationId: createEmptySchema
      tags:
        - edm
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
    patch:
      summary: Edits the schema contents for a corresponding namespace and name.
      operationId: updateSchema
      tags:
        - edm
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/EdmRequest"
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
  /datastore/edm/schema:
    get:
      summary: Gets all schemas.
      operationId: getSchemas
      tags:
        - edm
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schema"
    post:
      summary: Creates an empty schema, if it doesn't exist. If schema exists then no action is taken.
      operationId: createSchemaIfNotExists
      tags:
        - edm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schema"
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
  /datastore/edm/schema/{namespace}:
    get:
      summary: Gets all schemas associated with a given namespace and accessible by the caller.
      operationId: getSchemasInNamespace
      tags:
        - edm
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schema"

    #####################
    ## ENTITY SET APIs ##
    #####################

    # entity sets

    /datastore/entity-sets:
      get:
        summary: Get all EntitySet definitions.
        operationId: getAllEntitySets
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: Success
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/entitySet"
      post:
        summary: Create new EntitySet definitions if they don"t exist.
        operationId: createEntitySets
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/entitySet"
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: Success
    /datastore/entity-sets/ids/:
      post:
        summary: Get IDs for entity sets given their names.
        operationId: getEntitySetIds
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: Success
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties:
                    type: string
                    format: uuid
    /datastore/entity-sets/ids/{entitySetName}:
      get:
        summary: Gets the EntitySet UUID for the given EntitySet name.
        operationId: getEntitySetId
        parameters:
          - name: entitySetName
            in: path
            required: true
            schema:
              type: string
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: Success
            content:
              application/json:
                schema:
                  type: string
                  format: uuid
    /datastore/entity-sets/all/{entitySetId}:
      get:
        summary: Get the EntitySet definition for the given EntitySet UUID.
        operationId: getEntitySet
        parameters:
          - name: entitySetId
            in: path
            required: true
            schema:
              type: string
              format: uuid
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: "An Entity Set definition"
            content:
              application/json:
                schema:
                  $ref: "#/components/entitySet"
      delete:
        summary: Deletes the EntitySet definition for the given EntitySet UUID.
        operationId: deleteEntitySet
        parameters:
          - name: entitySetId
            in: path
            required: true
            schema:
              type: string
              format: uuid
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: Success
    /datastore/entity-sets/all/metadata:
      post:
        summary: Get property metadata for entity sets.
        operationId: getPropertyMetadataForEntitySets
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties:
                    type: object
                    additionalProperties:
                      $ref: "#/components/EntitySetPropertyMetaData"
    /datastore/entity-sets/all/{entitySetId}/metadata:
      get:
        summary: Get all entity set property metadata.
        operationId: getAllEntitySetPropertyMetadata
        parameters:
          - name: entitySetId
            in: path
            required: true
            schema:
              type: string
              format: uuid
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties:
                    $ref: "#/components/EntitySetPropertyMetaData"
    /datastore/entity-sets/all/{entitySetId}/properties:
      get:
        summary: Get all Property Types for entity set
        operationId: getPropertyTypesForEntitySet
        parameters:
          - name: entitySetId
            in: path
            required: true
            schema:
              type: string
              format: uuid
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            content:
              application/json:
                schema:
                  type: object
                  additionalProperties:
                    $ref: "#/components/PropertyType"
    /datastore/entity-sets/{entitySetId}/properties/{propertyTypeId}/:
      get:
        summary: Get specified property type metadata for an entity set.
        operationId: getEntitySetPropertyMetadata
        parameters:
          - name: entitySetId
            in: path
            required: true
            schema:
              type: string
              format: uuid
          - name: propertyTypeId
            in: path
            required: true
            schema:
              type: string
              format: uuid
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: Success
            content:
              application/json:
                schema:
                  $ref: "#/components/entitySetPropertyMetaData"
      post:
        summary: Updates the property type metadata for the given entity set.
        operationId: updateEntitySetPropertyMetadata
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        parameters:
          - name: entitySetId
            in: path
            required: true
            schema:
              type: string
              format: uuid
          - name: propertyTypeId
            in: path
            required: true
            schema:
              type: string
              format: uuid
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/metadataUpdate"
        responses:
          200:
            description: Success
    /datastore/entity-sets/{entitySetId}/metadata/:
      patch:
        summary: Updates the EntitySet definition for the given EntitySet UUID with the given metadata.
        operationId: updateEntitySetMetaData
        parameters:
          - name: entitySetId
            in: path
            required: true
            schema:
              type: string
              format: uuid
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/metadataUpdate"
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: Success
            content:
              application/json:
                schema:
                  type: integer
    /datastore/entity-sets/linking/{entitySetId}:
      post:
        summary: Adds the entity sets as linked entity sets to the linking entity set
        operationId: addEntitySetsToLinkingEntitySet
        parameters:
          - name: linkingEntitySetId
            in: path
            required: true
            schema:
              type: string
              format: uuid
          - name: entitySetIds
            in: body
            required: true
            schema:
              type: array
              items:
                type: string
                format: uuid
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: Success
            content:
              application/json:
                schema:
                  type: integer
      delete:
        summary: Removes/unlinks the linked entity sets from the linking entity set
        operationId: removeEntitySetsFromLinkingEntitySet
        parameters:
          - name: linkingEntitySetId
            in: path
            required: true
            schema:
              type: string
              format: uuid
          - name: entitySetIds
            in: body
            required: true
            schema:
              type: array
              items:
                type: string
                format: uuid
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: Success
            content:
              application/json:
                schema:
                  type: integer
    /datastore/entity-sets/linking/:
      put:
        summary: Adds the entity sets as linked entity sets to the linking entity sets
        operationId: addEntitySetsToLinkingEntitySets
        parameters:
          - name: linkingEntitySetId
            in: path
            required: true
            schema:
              type: string
              format: uuid
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
                    format: uuid
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: Success
            content:
              application/json:
                schema:
                  type: integer
      delete:
        summary: Removes/unlinks the linked entity sets from the linking entity set
        operationId: removeEntitySetsFromLinkingEntitySet
        parameters:
          - name: linkingEntitySetId
            in: path
            required: true
            schema:
              type: string
              format: uuid
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
                    format: uuid
        tags:
          - entitySets, edm
        security:
          - openlattice_auth: []
          - http_auth: []
        responses:
          "200":
            description: Success
            content:
              application/json:
                schema:
                  type: integer
              

  ###############
  ## DATA APIs ##
  ###############

  /datastore/data/associations/:
    post:
      summary: Creates a new set of associations.
      operationId: createAssociations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/dataEdgeMap"
      tags:
        - data
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: "Edges"
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
  /datastore/data/set/{entitySetId}:
    get:
      summary: Gets an iterable containing the entity data, using property type FQNs as key
      operationId: loadEntitySetData
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - data
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: "An Entity Set definition"
          content:
            application/json:
              schema:
                type: list
                items:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: string
    post:
      summary: Gets a list of entities by UUIDs
      operationId: loadFilteredEntitySetData
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/entitySetSelection"
      tags:
        - data
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: "A list of entity keys that were generated"
          content:
            application/json:
              schema:
                type: list
                items:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: string
    delete:
      summary: Deletes multiple entities from an entity set.
      operationId: deleteEntities
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [Soft, Hard]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      tags:
        - data
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: integer
  /datastore/data/set/{entitySetId}/all:
    delete:
      summary: Clears the Entity matching the given Entity id and all of its neighbor Entities
      operationId: deleteAllEntitiesFromEntitySet
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [Soft, Hard]
      tags:
        - data
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: "Success"
  /datastore/data/{entitySetId}/count:
    get:
      summary: Gets the number of entities in an entity set.
      operationId: getEntitySetSize
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - data
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: The number of entities in an entity set.
          content:
            application/json:
              schema:
                type: integer

  ############################
  ## DATA INTEGRATIONS APIs ##
  ############################

  /datastore/integration:
    post:
      summary: Integrate entity and association data
      operationId: integrateEntityAndAssociationData
      parameters:
        - name: detailedResults
          in: query
          required: true
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/bulkDataCreation"
      tags:
        - data-integrations
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: "A data search result object, containing the total number of hits for the given query, and the hits themselves"
          content:
            application/json:
              schema:
                $ref: "#/components/integrationResults"
  /datastore/integration/entityKeyIds:
    post:
      summary: Get entity key IDs
      operationId: getEntityKeyIds
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/entityKey"
      tags:
        - data-integrations
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: "A data search result object, containing the total number of hits for the given query, and the hits themselves"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid

  #################
  ## SEARCH APIs ##
  #################

  /datastore/search/advanced/{entitySetId}:
    post:
      summary: Executes a search over the data of a given entity set to find rows that match the search term
      operationId: executeAdvancedEntitySetDataQuery
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/advancedSearch"
      tags:
        - search
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: "A data search result object, containing the total number of hits for the given query, and the hits themselves"
          content:
            application/json:
              schema:
                $ref: "#/components/dataSearchResult"

  /datastore/search/{entitySetId}/{entityKeyId}:
    get:
      summary: Executes a search for all neighbors of an entity that are connected by an association
      operationId: executeEntityNeighborSearch
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: entityKeyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - search
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: "A list of objects containing information about the neighbor and association."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/neighborEntityDetails"
  /datastore/search/{entitySetId}/neighbors/advanced:
    post:
      summary: Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association
      operationId: executeFilteredEntityNeighborSearch
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/neighborSearchFilter"
      tags:
        - search
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: "A list of objects containing information about the neighbor and association."
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: "#/components/neighborEntityDetails"

  /datastore/search/{entitySetId}/neighbors/advanced/ids:
    post:
      summary: Executes a search for all neighbors of multiple entities of the same entity set that are connected by an association and returns a simple version of the neighborDetails
      operationId: executeFilteredEntityNeighborIdSearch
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/neighborSearchFilter"
      tags:
        - search
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: "A list of objects containing information about the neighbor and association."
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      $ref: "#/components/neighborEntityDetailsReduced"

  ####################
  ## DIRECTORY APIs ##
  ####################

  /datastore/principals/users/search/email/"{emailAddress}":
    get:
      summary: Get the user id for the given email address.
      operationId: searchAllUsersByEmail
      tags:
        - principal
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: emailAddress
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/auth0userBasic"
  /datastore/principals/users/{userId}:
    get:
      summary: Get the user for the given id.
      operationId: getUser
      tags:
        - principal
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/auth0userBasic"
  /datastore/principals/db:
    get:
      summary: Get the db access credentials.
      operationId: getDbAccessCredentials
      tags:
        - principal
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
  /datastore/principals/users/:
    get:
      summary: Get all users.
      operationId: getAllUsers
      tags:
        - principal
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/auth0userBasic"
  /datastore/principals/roles/current/:
    get:
      summary: Get current roles.
      operationId: getCurrentRoles
      tags:
        - principal
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/securablePrincipal"

  ########################
  ## AUTHORIZATION APIs ##
  ########################

  /datastore/permissions:
    post: #lattice-js l.29
      summary: Get the ACL for the given ACL Key, only if the user is the owner of the ACL Key.
      operationId: getAcl
      tags:
        - permissions
      security:
        - openlattice_auth: []
        - http_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/acl"
    patch: #lattice-js l.29
      summary: Updates the ACL for a particular ACL Key, only if the user is the owner of the ACL Key.
      operationId: updateAcl
      tags:
        - permissions
      security:
        - openlattice_auth: []
        - http_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/aclData"
      responses:
        "200":
          description: Success
  /datastore/authorizations:
    post:
      summary: Check authorizations
      operationId: checkAuthorizations
      tags:
        - authorizations
      security:
        - openlattice_auth: []
        - http_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/AccessCheck"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/Authorization"
    get:
      summary: Returns paged results for all authorized objects of specified objectType, that the current user has specified permission for.
      operationId: getAccessibleObjects
      tags:
        - authorizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: objectType
          in: query
          schema:
            type: string
            enum:
              - EntityType
              - EntitySet
              - PropertyTypeInEntitySet
              - Datasource
              - ComplexType
              - LinkingEntityType
              - AssociationType
              - Organization
              - App
              - AppType
              - Principal
              - Role
              - UnknownEdmTemplate
        - name: permission
          in: query
          schema:
            type: string
            enum: [DISCOVER, MATERIALIZE, LINK, READ, WRITE, OWNER]
        - name: pagingToken
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/AuthorizedObjectsSearchResult"

  ########################
  ## ORGANISATIONS APIs ##
  ########################

  /datastore/organizations:
    get:
      summary: Get all organisations
      operationId: getOrganizations
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/organization"
    post:
      summary: Create an organisation if it doesn't exist.
      operationId: createOrganizationIfNotExists
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/organization"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
                format: uuid
  /datastore/organizations/{organizationId}:
    get:
      summary: Get an organisation from the organizationId
      operationId: getOrganization
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/organization"
    delete:
      summary: Remove an organisation from the organizationId
      operationId: destroyOrganization
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
  /datastore/organizations/{organizationId}/entitySets:
    get:
      summary: Get the entity sets for an organization for a certain filter
      operationId: getOrganizationEntitySets
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: string
                      enum: [INTERNAL, EXTERNAL, MATERIALISED]
    post:
      summary: Get the entity sets for an organization for a certain flag
      operationId: getFlaggedOrganizationEntitySets
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
                  enum: [INTERNAL, EXTERNAL, MATERIALISED]
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: string
                      enum: [INTERNAL, EXTERNAL, MATERIALISED]
  /datastore/organizations/{organizationId}/entitySets/assemble:
    post:
      summary: Materializes entity sets into the organization database.
      operationId: assembleEntitySets
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: string
                      enum: [INTERNAL, EXTERNAL, MATERIALISED]
  /datastore/organizations/{organizationId}/title:
    put:
      summary: Update the organisation title
      operationId: updateTitle
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success
  /datastore/organizations/{organizationId}/description:
    put:
      summary: Update the organisation description
      operationId: updateDescription
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success
  /datastore/organizations/{organizationId}/email-domains:
    get:
      summary: Get auto-approved email domains
      operationId: getAutoApprovedEmailDomains
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    put:
      summary: Set auto-approved email domains
      operationId: setAutoApprovedEmailDomain
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
    delete:
      summary: Remove auto-approved email domains
      operationId: removeAutoApprovedEmailDomains
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: Success
  /datastore/organizations/{organizationId}/principals/members:
    get:
      summary: Get members of a certain organization
      operationId: getMembers
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/organizationMember"
  /datastore/organizations/{organizationId}/principals/members/{userId}:
    put:
      summary: Add member to an organization
      operationId: addMember
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
    delete:
      summary: Remove member from an organization
      operationId: removeMember
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
  /datastore/organizations/roles:
    post:
      summary: Create role
      operationId: createRole
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/role"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
                format: uuid
  /datastore/organizations/{organizationId}/principals/roles:
    get:
      summary: Get roles for an organization
      operationId: getRoles
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/role"
  /datastore/organizations/{organizationId}/principals/roles/{roleId}:
    get:
      summary: Get role for an organization from a roleId
      operationId: getRole
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/role"
    delete:
      summary: Remove role for an organization
      operationId: deleteRole
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
  /datastore/organizations/{organizationId}/principals/roles/{roleId}/title:
    put:
      summary: Update role title for an organization from a roleId
      operationId: updateRoleTitle
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success
  /datastore/organizations/{organizationId}/principals/roles/{roleId}/description: 
    post:
      summary: Update role description for an organization from a roleId
      operationId: updateRoleDescription
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success
  /datastore/organizations/{organizationId}/principals/roles/{roleId}/members/:
    get:
      summary: Get members of a role for an organization from a roleId
      operationId: getAllUsersOfRole
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/auth0userBasic"
  /datastore/organizations/{organizationId}/principals/roles/{roleId}/members/{userId}: 
    put:
      summary: Add a role to a user
      operationId: addRoleToUser
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
    delete:
      summary: Remove a role from a user
      operationId: removeRoleFromUser
      tags:
        - organizations
      security:
        - openlattice_auth: []
        - http_auth: []
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success

components:
  securitySchemes:
    http_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      name: HttpAuthorization
    openlattice_auth:
      type: apiKey
      in: header
      name: Authorization

  schemas:
    fullQualifiedName:
      type: object
      properties:
        name:
          type: string
        namespace:
          type: string
    propertyType:
      type: object
      properties:
        title:
          type: string
        id:
          type: string
          format: uuid
        type:
          $ref: "#/components/fullQualifiedName"
        description:
          type: string
        schemas:
          type: array
          items:
            $ref: "#/components/fullQualifiedName"
        datatype:
          type: string
        piiField:
          type: boolean
        multiValued:
          type: boolean
        analyzer:
          type: string
    entityType:
      title: An entity type
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        id:
          type: string
        type:
          $ref: "#/components/fullQualifiedName"
        schemas:
          type: array
          items:
            $ref: "#/components/fullQualifiedName"
        key:
          type: array
          items:
            type: string
        properties:
          type: array
          items:
            type: string
        propertyTags:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        basetype:
          type: string
        category:
          type: string
          enum: [AssociationType, EntityType]
      example:
        id: ec6865e6-e60e-424b-a071-6a9c1603d735
        type:
          namespace: lattice
          name: myentity
        schemas:
          namespace: lattice
          name: myschema
        key:
          [
            8f79e123-3411-4099-a41f-88e5d22d0e8d,
            e39dfdfa-a3e6-4f1f-b54b-646a723c3085,
          ]
        properties:
          [
            8f79e123-3411-4099-a41f-88e5d22d0e8d,
            e39dfdfa-a3e6-4f1f-b54b-646a723c3085,
            fae6af98-2675-45bd-9a5b-1619a87235a8,
          ]
        category: EntityType
    associationType:
      type: object
      properties:
        entityType:
          $ref: "#/components/entityType"
        src:
          type: array
          items:
            type: string
        dst:
          type: array
          items:
            type: string
        bidirectional:
          type: boolean
      example:
        entityType:
          id: ec6865e6-e60e-424b-a071-6a9c1603d735
          type:
            namespace: lattice
            name: myentity
          schemas:
            namespace: lattice
            name: myschema
          key:
            [
              8f79e123-3411-4099-a41f-88e5d22d0e8d,
              e39dfdfa-a3e6-4f1f-b54b-646a723c3085,
            ]
          properties:
            [
              8f79e123-3411-4099-a41f-88e5d22d0e8d,
              e39dfdfa-a3e6-4f1f-b54b-646a723c3085,
              fae6af98-2675-45bd-9a5b-1619a87235a8,
            ]
        src: [ec6865e6-e60e-424b-a071-6a9c1603d735]
        dst: [4b08e1f9-4a00-4169-92ea-10e377070220]
        description: AssociationType Description
        bidirectional: true
        category: AssociationType
    schema:
      type: object
      properties:
        entityTypes:
          type: array
          items:
            $ref: "#/components/entityType"
        propertyTypes:
          type: array
          items:
            $ref: "#/components/propertyType"
        fqn:
          $ref: "#/components/fullQualifiedName"
    EDM:
      type: object
      properties:
        namespaces:
          type: array
          items:
            type: string
        schemas:
          type: array
          items:
            $ref: "#/components/schema"
        propertyTypes:
          type: array
          items:
            $ref: "#/components/propertyType"
        entityTypes:
          type: array
          items:
            $ref: "#/components/entityType"
        associationTypes:
          type: array
          items:
            $ref: "#/components/associationType"
    EDMdiff:
      type: object
      properties:
        conflicts:
          $ref: "#/components/EDM"
        diff:
          $ref: "#/components/EDM"
    metadataUpdate:
      title: An update for an entity sets
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        name:
          type: string
        contacts:
          type: array
          items:
            type: string
        type:
          $ref: "#/components/fullQualifiedName"
        pii:
          type: boolean
        defaultShow:
          type: boolean
        url:
          type: string
        propertyTags:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        indexType:
          type: string
          enum: [BTREE, HASH, GIN, NONE]
        organizationId:
          type: string
          format: uuid
        partitions:
          type: array
          items:
            type: integer
    propertyUsageSummary:
      type: object
      properties:
        entityTypeId:
          type: string
        entitySetId:
          type: string
        entitySetName:
          type: string
        count:
          type: integer
    EdmRequest:
      type: object
      properties:
        action:
          type: string
          enum: [ADD, REMOVE, REPLACE]
        propertyTypes:
          type: array
          items:
            type: string
        entityTypes:
          type: array
          items:
            type: string
    entitySet:
      title: An entity set
      type: object
      properties:
        name:
          type: string
        id:
          type: string
          format: uuid
        title:
          type: string
        contacts:
          type: array
          items:
            type: string
        entityTypeId:
          type: string
          format: uuid
        description:
          type: string
        linking:
          type: boolean
        linked_entity_sets:
          type: array
          items:
            type: string
        external:
          type: boolean
        organizationId:
          type: string
          format: uuid
      example:
        entityTypeId: 963b597b-b28d-4f59-b2e6-4d443499e464
        id: 843b597b-b28d-4f59-b2e6-4d443499e323
        name: NameOfMyEntitySet
        title: This is the title of the entitySet
        contacts: ["support@openlattice.com"]
        description: This is a more elaborate description of the entity set.
    entitySetPropertyMetaData:
      title: EntitySet Property Metadata
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        propertyTags:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          defaultShow:
            type: boolean

    neighborDetails:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    neighborEntityDetails:
      type: object
      properties:
        associationEntitySet:
          $ref: "#/components/entitySet"
        associationDetails:
          $ref: "#/components/neighborDetails"
        neighborEntitySet:
          $ref: "#/components/entitySet"
        neighborId:
          type: string
        neighborDetails:
          $ref: "#/components/neighborDetails"
    neighborEntityIds:
      type: object
      properties:
        associationId:
          type: string
          format: uuid
        neighborId:
          type: string
          format: uuid
        src:
          type: boolean
    neighborSearchFilter:
      type: object
      properties:
        entityKeyIds:
          type: array
          items:
            type: string
            format: uuid
        src:
          type: array
          items:
            type: string
            format: uuid
        dst:
          type: array
          items:
            type: string
            format: uuid
        edge:
          type: array
          items:
            type: string
            format: uuid
    dataSearchResult:
      type: object
      properties:
        numHits:
          type: integer
        hits:
          type: array
          items:
            type: object
            additionalProperties:
              type: array
              items:
                type: string
    advancedSearch:
      type: object
      properties:
        searchFields:
          type: list
          items:
            $ref: "#/components/searchDetails"
        start:
          type: integer
        maxHits:
          type: integer
    searchDetails:
      type: object
      properties:
        searchTerm:
          type: string
        property:
          type: string
          format: uuid
        exact:
          type: boolean
    bulkDataCreation:
      type: object
      properties:
        entities:
          type: list
          items:
            $ref: "#/components/entity"
        associations:
          type: list
          items:
            $ref: "#/components/association"
    entity:
      type: object
      properties:
        key:
          $ref: "#/components/entityKey"
        details:
          type: object
          additionalProperties:
            type: string
    association:
      type: object
      properties:
        key:
          $ref: "#/components/entityKey"
        src:
          $ref: "#/components/entityKey"
        dst:
          $ref: "#/components/entityKey"
        details:
          type: object
          additionalProperties:
            type: string
    entityKey:
      type: object
      properties:
        entitySetId:
          type: string
          format: uuid
        entityId:
          type: string
          format: uuid
    integrationResults:
      type: object
      properties:
        entityCount:
          type: integer
        associationCount:
          type: integer
        associationsEntityKeyMappings:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
        entitySetsEntityKeyMappings:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    auth0userBasic:
      type: object
      properties:
        user_id:
          type: string
        email:
          type: string
        nickname:
          type: string
        username:
          type: string
        roles:
          type: array
          items:
            type: string
        "com/openlattice/organization":
          type: array
          items:
            type: string
            format: uuid
    ace:
      type: object
      properties:
        principal:
          $ref: "#/components/principal"
        permissions:
          type: array
          items:
            type: string
    acl:
      type: object
      properties:
        aclKey:
          type: array
          items:
            type: string
            format: uuid
        aces:
          type: array
          items:
            $ref: "#/components/ace"
    aclData:
      type: object
      properties:
        action:
          type: string # this could be ADD, REMOVE, SET or REQUEST
        acl:
          $ref: "#/components/acl"
    principal:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
          format: uuid
    securablePrincipal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        principal:
          $ref: "#/components/principal"
        title:
          type: string
        description:
          type: string
    dataEdgeMap:
      type: object
      additionalProperties:
        $ref: "#/components/dataEdge"
    dataEdge:
      type: object
      properties:
        src:
          type: string
          format: uuid
        dst:
          type: string
          format: uuid
        data:
          $ref: "#/components/dataMap"
    dataMap:
      type: object
      additionalProperties:
        type: string
    role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        organizationId:
          type: string
          format: uuid
        principal:
          $ref: "#/components/principal"
        title:
          type: string
        description:
          type: string
        "@class":
          type: string
          enum: ["com.openlattice.organization.roles.Role"]
    organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        principal:
          $ref: "#/components/principal"
        title:
          type: string
        description:
          type: string
        emails:
          type: array
          items:
            type: string
        members:
          type: array
          items:
            $ref: "#/components/principal"
        roles:
          type: array
          items:
            $ref: "#/components/role"
        apps:
          type: array
          items:
            type: string
    entitySetSelection:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
            format: uuid
        properties:
          type: array
          items:
            type: string
            format: uuid
    organizationMember:
      type: object
      properties:
        principal:
          $ref: "#/components/securablePrincipal"
        profile:
          $ref: "#/components/auth0userBasic"
        roles:
          type: array
          items:
            $ref: "#/components/securablePrincipal"
    AccessCheck:
      type: object
      properties:
        aclKey:
          type: array
          items:
            type: string
            format: uuid
        permissions:
          type: array
          items:
            type: string
            enum: [DISCOVER, MATERIALIZE, LINK, READ, WRITE, OWNER]
    Authorization:
      type: object
      properties:
        aclKey:
          type: array
          items:
            type: string
            format: uuid
        permissions:
          type: object
          additionalProperties:
            type: boolean
    AuthorizedObjectsSearchResult:
      type: object
      properties:
        pagingToken:
          type: string
        authorizedObjects:
          type: array
          items:
            type: array
            items:
              type: string

tags:
  - name: edm
    description: API endpoints to the entity data model.
  - name: permissions
    description: API endpoints for permissions for organisations, roles and users.
  - name: directory
    description: API endpoints for searching users and their properties.
  - name: data
    description: API endpoints to reading and writing data.
  - name: search
    description: API endpoints to search data.
  - name: organizations
    description: API endpoints related to organizations.
  - name: entitySets
    description: API endpoints for dealing with entity sets.
externalDocs:
  description: "Find out more about OpenLattice"
  url: "https://openlattice.com/"
