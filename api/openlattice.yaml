openapi: "3.0.0"
info:
  description: "OpenLattice API"
  version: "0.0.1"
  title: "OpenLattice API"
  termsOfService: "http://api.openlattice.com/terms/"
  contact:
    email: "support@openlattice.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
    - url: "https://api.openlattice.com"
      description: "Production OpenLattice API"
    - url: "https://api.staging.openlattice.com"
      description: "Staging OpenLattice API"
    - url: "http://localhost:8080"
      description: "Local OpenLattice API"

paths:

  #                        .,,.
  #                      *******,
  #                    **********
  #                  ************
  #                ************.
  #              *********(((/**
  #            ,********(((/*****
  #            *******(((/*******
  #            .****(((/********
  #              .///******(((*
  #             ********/(((*****
  #            ********(((*******
  #            *****/(((/*******,
  #             .*/(((*********
  #             .************
  #            ************
  #            **********
  #             *******
  #
  #               ENTITY DATA MODEL API
  #
  ##############################################################


  ## MISSING
  # complex type API's
  # enum type API's
  # schema API's

  ######################
  ## Entity Set API's ##
  ######################

  /datastore/edm/entity/set/{entitySetId}:
    get:
      summary: Get the EntitySet definition for the given EntitySet UUID.
      operationId: getEntitySet
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entitySetId"
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: "An Entity Set definition"
          schema:
            $ref: '#/components/schemas/entitySet'
    delete:
      summary: Deletes the EntitySet definition for the given EntitySet UUID.
      operationId: deleteEntitySet
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entitySetId"
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
    patch:
      summary: Updates the EntityType definition for the given EntitySet UUID with the given metadata.
      operationId: updateEntitySetMetaData
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entitySetId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entitySet'
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
  /datastore/edm/ids/entity/set/{entitySetName}:
    get:
      summary: Gets the EntitySet UUID for the given EntitySet name.
      operationId: getEntitySetId
      parameters:
        - name: entitySetName
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entitySetName"
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entitySetId'
  /datastore/edm/entity/set:
    get:
      summary: Get all EntitySet definitions.
      operationId: getAllEntitySets
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/entitySet'
    post:
      summary: Create new EntitySet definitions if they don't exist.
      operationId: createEntitySets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/entitySet'
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
  /datastore/edm/entity/set/{entitySetId}/property/type:
    get:
      summary: Get all property type metadata for an entity set.
      operationId: getAllEntitySetPropertyMetadata
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entitySetId"
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/propertyType'
  /datastore/edm/entity/set/{entitySetId}/property/type/{propertyTypeId}/:
    get:
      summary: Get specified property type metadata for an entity set.
      operationId: getEntitySetPropertyMetadata
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entitySetId"
        - name: propertyTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/propertyTypeId"
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/propertyType'
    post:
      summary: Updates the property type metadata for the given entity set.
      operationId: updateEntitySetPropertyMetadata
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entitySetId"
        - name: propertyTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/propertyTypeId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/propertyType'
      responses:
        200:
          description: Success

  #######################
  ## Entity Type API's ##
  #######################

  /datastore/edm/entity/type/{entityTypeId}:
    get:
      summary: Gets the EntityType definition for the given EntityType UUID.
      operationId: getEntityType
      tags:
        - edm
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityType'
    delete:
      summary: Deletes the EntityType definition for the given EntityType UUID.
      operationId: deleteEntityType
      tags:
        - edm
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
      responses:
        '200':
          description: Success
    patch:
      summary: Updates the EntityType definition for the given EntityType UUID with the given metadata.
      operationId: updateEntityTypeMetaData
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entityType'
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
  /datastore/edm/ids/entity/type/{namespace}/{name}:
    get:
      summary: Gets the EntityType UUID for the given EntityType FQN.
      operationId: getEntityTypeId
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            example: openlattice
        - name: name
          in: path
          required: true
          schema:
            example: myentitytype
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityTypeId'
  /datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}:
    put:
      summary: Updates the EntityType definition for the given EntityType UUID by adding the given PropertyType UUID.
      operationId: addPropertyTypeToEntityType
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
        - name: propertyTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/propertyTypeId"
      responses:
        '200':
          description: Success
    delete:
      summary: Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID.
      operationId: removePropertyTypeFromEntityType
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
        - name: propertyTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/propertyTypeId"
      responses:
        '200':
          description: Success
  /datastore/edm/entity/type/{entityTypeId}/{propertyTypeId}/force:
    delete:
      summary: Updates the EntityType definition for the given EntityType UUID by removing the given PropertyType UUID, regardless of whether or not there is data associated with the entity type.
      operationId: forceRemovePropertyTypeFromEntityType
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
        - name: propertyTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/propertyTypeId"
      responses:
        '200':
          description: Success
  /datastore/edm/entity/type/:
    get:
      summary: Gets all EntityType definitions.
      operationId: getAllEntityTypes
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/entityType'
    post:
      summary: Creates a new EntityType definition, if it doesn't exist.
      operationId: createEntityType
      tags:
        - edm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entityType'
      responses:
        '200':
          description: Success
  /datastore/edm/association/type/:
    get:
      summary: Gets all association EntityType definitions.
      operationId: getAllAssociationEntityTypes
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/associationType'
    post:
      summary: Creates a new AssociationType definition, if it doesn't exist.
      operationId: createAssociationType
      tags:
        - edm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/associationType'
      responses:
        '200':
          description: Success
  /datastore/edm/entity/type/{entityTypeId}/property/type:
    patch:
      summary: Updates the EntityType definition for the given EntityType UUID by reordering its properties as specified by the provided list.
      operationId: reorderPropertyTypesInEntityType
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
        - name: propertyTypeIds
          in: path
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/propertyTypeId"
      responses:
        '200':
          description: Success
  /datastore/edm/entity/type/{entityTypeId}/hierarchy:
    patch:
      summary: Get the EntityType hierarchy for the given EntityType UUID.
      operationId: getEntityTypeHierarchy
      parameters:
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success

  #########################
  ## Property Type API's ##
  #########################

  /datastore/edm/property/type/{propertyTypeId}:
    get:
      summary: Gets the PropertyType definition for the given PropertyType UUID.
      operationId: getPropertyType
      tags:
        - edm
      parameters:
        - name: propertyTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/propertyTypeId"
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/propertyType'
    delete:
      summary: Deletes the PropertyType definition for the given PropertyType UUID.
      operationId: deletePropertyType
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: propertyTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/propertyTypeId"
      responses:
        '200':
          description: Success
    patch:
      summary: Updates the PropertyType definition for the given PropertyType UUID with the given metadata.
      operationId: updatePropertyTypeMetaData
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: propertyTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/propertyTypeId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/propertyType'
      responses:
        '200':
          description: Success
  /datastore/edm/property/type/{propertyTypeId}/force:
    delete:
      summary: Deletes the PropertyType definition for the given PropertyType UUID regardless of whether or not there is data associated with it.
      operationId: forceDeletePropertyType
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: propertyTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/propertyTypeId"
      responses:
        '200':
          description: Success
  /datastore/edm/ids/property/type/{namespace}/{name}:
    get:
      summary: Gets the PropertyType UUID for the given PropertyType FQN.
      operationId: getPropertyTypeId
      tags:
        - edm
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/propertyTypeId'
  /datastore/edm/property/type/:
    get:
      summary: Gets all PropertyType definitions.
      operationId: getAllPropertyTypes
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/propertyType'
    post:
      summary: Creates a new PropertyType definition, if it doesn't exist.
      operationId: createPropertyType
      tags:
        - edm
      security:
        - openlattice_auth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/propertyType'
      responses:
        '200':
          description: Success

  /datastore/edm/property/type/namespace/{namespace}:
    get:
      summary: Gets all PropertyType definitions under the given namespace.
      operationId: getAllPropertyTypesInNamespace
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/propertyType'

  ############################
  ## Association Type API's ##
  ############################

  /datastore/edm/association/type/{associationTypeId}:
    get:
      summary: Get the AssociationType definition for the given AssociationType UUID.
      operationId: getAssociationType
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/associationTypeId"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/associationType'
    delete:
      summary: Delete the AssociationType definition for the given AssociationType UUID.
      operationId: deleteAssociationType
      tags:
        - edm
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/associationTypeId"
      responses:
        '200':
          description: Success
  /datastore/edm/association/type/{associationTypeId}/detailed:
    get:
      summary: Get details about the AssociationType for the given AssociationType UUID.
      operationId: getAssociationTypeDetails
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/associationTypeId"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/associationType'
  /datastore/edm/association/type/{associationTypeId}/available:
    get:
      summary: Get all available associations for the given AssociationType UUID.
      operationId: getAllAvailableAssociationTypes
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/associationTypeId"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/associationType'
  /datastore/edm/association/type/{associationTypeId}/dst/{entityTypeId}:
    put:
      summary: Update the AssociationType dst entity types for the given AssociationType UUID by adding the given EntityType UUID.
      operationId: addDstEntityTypeToAssociationType
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/associationTypeId"
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
      responses:
        '200':
          description: Success
    delete:
      summary: Updates the AssociationType dst entity types for the given AssociationType UUID by removing the given EntityType UUID.
      operationId: removeDstEntityTypeFromAssociationType
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/associationTypeId"
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
      responses:
        '200':
          description: Success
  /datastore/edm/association/type/{associationTypeId}/src/{entityTypeId}:
    put:
      summary: Update the AssociationType src entity types for the given AssociationType UUID by adding the given EntityType UUID.
      operationId: addSrcEntityTypeToAssociationType
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/associationTypeId"
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
      responses:
        '200':
          description: Success
    delete:
      summary: Updates the AssociationType src entity types for the given AssociationType UUID by removing the given EntityType UUID.
      operationId: removeSrcEntityTypeFromAssociationType
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: associationTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/associationTypeId"
        - name: entityTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entityTypeId"
      responses:
        '200':
          description: Success

  ###################
  ## Summary API's ##
  ###################

  /datastore/edm/summary:
    get:
      summary: Get Property Usage Summary for all properties.
      operationId: getAllPropertyUsageSummaries
      tags:
        - edm
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/propertyUsageSummary'
  /datastore/edm/summary/{propertyTypeId}:
    get:
      summary: Get Property Usage Summary for property with given ID.
      operationId: getPropertyUsageSummary
      tags:
        - edm
      security:
        - openlattice_auth: []
      parameters:
        - name: propertyTypeId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/propertyTypeId"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/propertyUsageSummary'


  #       ....           ....           ....           ....
  #      ||             ||             ||             ||
  #  /"""l|\        /"""l|\        /"""l|\        /"""l|\
  # /_______\      /_______\      /_______\      /_______\
  # |  .-.  |------|  .-.  |------|  .-.  |------|  .-.  |------
  #  __|L|__| .--. |__|L|__| .--. |__|L|__| .--. |__|L|__| .--.
  # _\  \\p__`o-o'__\  \\p__`o-o'__\  \\p__`o-o'__\  \\p__`o-o'_
  # ------------------------------------------------------------
  # ------------------------------------------------------------
  #
  #               PERMISSIONS API
  #
  ##############################################################

  /datastore/principals/users/search/email/"{emailAddress}":
    get:
      summary: Get the user id for the given email address.
      operationId: searchAllUsersByEmail
      tags:
        - permissions
      security:
        - openlattice_auth: []
      parameters:
        - name: emailAddress
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/emailAddress"
      responses:
        200:
          description: Success
          schema:
            $ref: '#/components/schemas/aclKey'
  /datastore/permissions:
    post: #lattice-js l.29
      summary: Get the ACL for the given ACL Key, only if the user is the owner of the ACL Key.
      operationId: getAcl
      tags:
        - permissions
      security:
        - openlattice_auth: []
      parameters:
        - name: aclKey
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/aclKey"
      responses:
        '200':
          description: Success
    patch: #lattice-js l.29
      summary: Updates the ACL for a particular ACL Key, only if the user is the owner of the ACL Key.
      operationId: updateAcl
      tags:
        - permissions
      security:
        - openlattice_auth: []
      parameters:
        - name: aclKey
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/aclKey"
      responses:
        '200':
          description: Success

  #       ....           ....           ....           ....
  #      ||             ||             ||             ||
  #  /"""l|\        /"""l|\        /"""l|\        /"""l|\
  # /_______\      /_______\      /_______\      /_______\
  # |  .-.  |------|  .-.  |------|  .-.  |------|  .-.  |------
  #  __|L|__| .--. |__|L|__| .--. |__|L|__| .--. |__|L|__| .--.
  # _\  \\p__`o-o'__\  \\p__`o-o'__\  \\p__`o-o'__\  \\p__`o-o'_
  # ------------------------------------------------------------
  # ------------------------------------------------------------
  #
  #               DATA API
  #
  ##############################################################

  ######################
  ## Entity Set API's ##
  ######################

     #             .,,.
     #           *******,
     #         **********
     #       ************
     #     ************.
     #   *********(((/**
     # ,********(((/*****
     # *******(((/*******
     # .****(((/********
     #   .///******(((*
     #  ********/(((*****
     # ********(((*******
     # *****/(((/*******,
     #  .*/(((*********
     #  .************
     # ************
     # **********
     #  *******

  /datastore/data/set/{entitySetId}:
    get: # lattice-js l.564
      summary: Get the EntitySet data for the given EntitySet UUID.
      operationId: getEntitySet
      parameters:
        - name: entitySetId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/entitySetId"
      tags:
        - data
      security:
        - openlattice_auth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entitySet'




  #       ....           ....           ....           ....
  #      ||             ||             ||             ||
  #  /"""l|\        /"""l|\        /"""l|\        /"""l|\
  # /_______\      /_______\      /_______\      /_______\
  # |  .-.  |------|  .-.  |------|  .-.  |------|  .-.  |------
  #  __|L|__| .--. |__|L|__| .--. |__|L|__| .--. |__|L|__| .--.
  # _\  \\p__`o-o'__\  \\p__`o-o'__\  \\p__`o-o'__\  \\p__`o-o'_
  # ------------------------------------------------------------
  # ------------------------------------------------------------
  #
  #               OTHER API
  #
  ##############################################################


  /data/ticket/{entitySetId}/{syncId}:
    post:
      summary: "Acquires a sync ticket"
      operationId: "acquireSyncTicket"
      parameters:
        - in: path
          name: entitySetId
          description: "The entity set id for which to acquire a sync ticket."
          required: true
          schema:
            $ref: "#/components/schemas/EntitySetId"
        - in: path
          name: syncId
          description: "The sync id for the entity being requested."
          required: true
          schema:
            $ref: "#/components/schemas/SyncId"
      responses:
        200:
          description: "A 128-bit random session id for synchronizing data."

  #       ....           ....           ....           ....
  #      ||             ||             ||             ||
  #  /"""l|\        /"""l|\        /"""l|\        /"""l|\
  # /_______\      /_______\      /_______\      /_______\
  # |  .-.  |------|  .-.  |------|  .-.  |------|  .-.  |------
  #  __|L|__| .--. |__|L|__| .--. |__|L|__| .--. |__|L|__| .--.
  # _\  \\p__`o-o'__\  \\p__`o-o'__\  \\p__`o-o'__\  \\p__`o-o'_
  # ------------------------------------------------------------
  # ------------------------------------------------------------
  #
  #               COMPONENTS
  #
  ##############################################################
components:
  responses:
    ServerError:
      description: Server Error
    Success:
      description: Success
  securitySchemes:
    openlattice_auth:
        type: http
        scheme: bearer

  schemas:

    #################
    ## EDM elements #
    #################

    # entity sets
    entitySetId:
      type: string
      format: uuid
      example: 73f4b728-6c1d-49ee-bc5a-a618adf68590
    entitySetName:
      title: Entity set name
      type: string
      example: PoliceRecords
    entitySet:
      title: An entity set
      type: object
      properties:
        name:
          $ref: "#/components/schemas/entitySetName"
        id:
          $ref: "#/components/schemas/entitySetId"
        title:
          type: string
        contacts:
          type: array
          items: string
        entityTypeId:
          $ref: "#/components/schemas/entityTypeId"
        description:
          type: string
        linking:
          type: boolean
        linked_entity_sets:
          type: array
          items: uuid
        external:
          type: boolean
      example:
        entityTypeId: 963b597b-b28d-4f59-b2e6-4d443499e464
        id: 843b597b-b28d-4f59-b2e6-4d443499e323
        name: NameOfMyEntitySet
        title: This is the title of the entitySet
        contacts: ['support@openlattice.com']
        description: This is a more elaborate description of the entity set.

    # property type
    propertyTypeId:
      type: string
      format: uuid
      example: 73f4b728-6c1d-49ee-bc5a-a618adf68590
    propertyType:
      type: object
      properties:
        title:
          type: string
        id:
          type: string
          format: uuid
        type:
          type:
            $ref: "#/components/schemas/FullQualifiedName"
        description:
          type: string
        schemas:
          type: array
          items:
            type:
              $ref: "#/components/schemas/FullQualifiedName"
        datatype:
          type: string
        piiField:
          type: boolean
        multiValued:
          type: boolean
        analyzer:
          type: boolean
    example:
      id: 73f4b728-6c1d-49ee-bc5a-a618adf68590
      description: This is the description of my property
      title: myproperty
      type:
        namespace: lattice
        name: propertyname
      schemas:
        - namespace: lattice
          name: schemaname
      datatype: string
      piiField: false
      analyzer: STANDARD

    # entity type
    entityTypeId:
      type: string
      format: uuid
      example: 73f4b728-6c1d-49ee-bc5a-a618adf68590
    entityType:
      title: An entity type
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        id:
          type: string
        type:
          type:
            $ref: "#/components/schemas/FullQualifiedName"
        schemas:
          type: array
          items:
            type:
              $ref: "#/components/schemas/FullQualifiedName"
        key:
          type: array
          items:
            type: string
        properties:
          type: array
          items:
            type: string
        propertyTags:
          type:
            type: object
        basetype:
          type:
            type: string
        # category:
        #   type: string
        #   enum: [AssociationType, EntityType]
      example:
        id: ec6865e6-e60e-424b-a071-6a9c1603d735
        type:
          namespace: lattice
          name: myentity
        schemas:
          namespace: lattice
          name: myschema
        key: [8f79e123-3411-4099-a41f-88e5d22d0e8d, e39dfdfa-a3e6-4f1f-b54b-646a723c3085]
        properties: [8f79e123-3411-4099-a41f-88e5d22d0e8d, e39dfdfa-a3e6-4f1f-b54b-646a723c3085, fae6af98-2675-45bd-9a5b-1619a87235a8]
        # category: EntityType

    # association type
    associationTypeId:
      type: string
      format: uuid
      example: 73f4b728-6c1d-49ee-bc5a-a618adf68590
    associationType:
      type: object
      properties:
        entityType:
          $ref: "#/components/schemas/entityType"
        src:
          type: array
          items:
            type: string
        dst:
          type: array
          items:
            type: string
        bidirectional:
          type: boolean
      example:
        entityType:
          id: ec6865e6-e60e-424b-a071-6a9c1603d735
          type:
            namespace: lattice
            name: myentity
          schemas:
            namespace: lattice
            name: myschema
          key: [8f79e123-3411-4099-a41f-88e5d22d0e8d, e39dfdfa-a3e6-4f1f-b54b-646a723c3085]
          properties: [8f79e123-3411-4099-a41f-88e5d22d0e8d, e39dfdfa-a3e6-4f1f-b54b-646a723c3085, fae6af98-2675-45bd-9a5b-1619a87235a8]
        src: [ec6865e6-e60e-424b-a071-6a9c1603d735]
        dst: [4b08e1f9-4a00-4169-92ea-10e377070220]
        description: AssociationType Description
        bidirectional: true
        category: AssociationType

    propertyUsageSummary:
      type: object
      properties:
        entityTypeId:
          type: string
        entitySetId:
          type: string
        count:
          type: integer
    # SyncTicket:
    #   type: "string"
    #   format: "uuid"
    aclKey:
      type: string
      format: uuid
    emailAddress:
      type: string
      example: info@openlattice.com
    FullQualifiedName:
      title: "Fullqualified name (eg. entity type / association type)"
      type: "string"
      properties:
        namespace:
          type: string
        name:
          type: string
    # ApiResponse:
    #   type: "object"
    #   properties:
    #     code:
    #       type: "integer"
    #       format: "int32"
    #     type:
    #       type: "string"
    #     message:
    #       type: "string"

tags:
- name: edm
  description: Entity Data Model API's
  externalDocs:
    description: OpenLattice help pages
    url: https://help.openlattice.com/
- name: permissions
  description: Permissions API's
  externalDocs:
    description: OpenLattice help pages
    url: https://help.openlattice.com/
externalDocs:
  description: "Find out more about OpenLattice"
  url: "https://openlattice.com/"
